const BaseAIService = require('./BaseAIService');

class AIService extends BaseAIService {
  constructor() {
    super();
  }


  async generateDriverInsights(driverData) {
    try {
      const prompt = this.buildDriverInsightPrompt(driverData);
      const aiResponse = await this.generateContent(prompt);
      
      console.log('AI Response:', aiResponse);

      // Parse the JSON response with fallback
      const fallback = {
        overall: 'AI analysis temporarily unavailable. Driver performance appears within normal parameters.',
        strengths: 'Unable to generate detailed analysis at this time.',
        recommendations: 'Please try again later or contact system administrator.',
        risk: 'No significant risks identified based on available data.'
      };

      const insights = this.parseJSONResponse(aiResponse, fallback);
      return this.formatInsightsToString(insights);

    } catch (error) {
      console.error('Driver Insights AI Service Error:', error.message);
      
      const fallbackInsights = {
        overall: 'AI service temporarily unavailable. Driver performance data retrieved successfully.',
        strengths: 'Please review driver metrics manually or try again later.',
        recommendations: 'Contact system administrator if this issue persists.',
        risk: 'Unable to assess risks automatically at this time.'
      };
      return this.formatInsightsToString(fallbackInsights);
    }
  }




  formatInsightsToString(insights) {
    return `
DRIVER PERFORMANCE ANALYSIS 

Overall Performance:
${insights.overall}

Strengths & Areas for Improvement:
${insights.strengths}

Recommendations:
${insights.recommendations}

Risk Assessment:
${insights.risk}

Generated by AI Transportation Analyst`.trim();
  }

  getSystemInstructions() {
    return `You are a transportation analyst. Analyze driver performance data and provide actionable insights for fleet managers.

Focus on:
- Performance strengths and improvement areas
- Specific recommendations for drivers/managers
- Safety, efficiency, and reliability factors
- Professional, concise analysis (1-2 paragraphs max)`;
  }

  
  buildDriverInsightPrompt(driverData) {
    const { driver, summary, ratings, recentDeliveries } = driverData;
    
    // Build driver information section
    const driverInfo = [
      `DRIVER: ${driver.name} (${driver.type === 'transporter' ? 'External' : 'In-House'})`,
      `Company: ${driver.transportCompany || 'N/A'} | Deliveries: ${driver.totalDeliveries || 'N/A'} | Experience: ${this.calculateExperience(driver.createdAt)}`,
      '',
      'RATINGS:',
      `Overall: ${summary.averageOverall}/5 (${summary.totalRatings} ratings)`,
      `Punctuality: ${summary.averagePunctuality}/5`,
      `Professionalism: ${summary.averageProfessionalism}/5`,
      `Quality: ${summary.averageDeliveryQuality}/5`,
      `Communication: ${summary.averageCommunication}/5`
    ];

    // Add safety rating if available
    if (summary.averageSafety > 0) {
      driverInfo.push(`Safety: ${summary.averageSafety}/5`);
    }

    // Build feedback section
    const feedbackSection = [];
    if (ratings && ratings.length > 0) {
      feedbackSection.push('', 'RECENT FEEDBACK:');
      
      const recentRatingsWithComments = ratings
        .filter(r => r.comments && r.comments.trim())
        .slice(0, 2);
        
      if (recentRatingsWithComments.length > 0) {
        recentRatingsWithComments.forEach((rating, index) => {
          feedbackSection.push(`${index + 1}. "${rating.comments}" (${rating.overallRating}/5)`);
        });
      } else {
        feedbackSection.push('No recent feedback available.');
      }
    }

    // Build deliveries section
    const deliveriesSection = [];
    if (recentDeliveries && recentDeliveries.length > 0) {
      deliveriesSection.push('', 'RECENT DELIVERIES:');
      recentDeliveries.slice(0, 2).forEach((delivery, index) => {
        deliveriesSection.push(`${index + 1}. ${delivery.request.origin} → ${delivery.request.destination} (${delivery.request.truckCount}→${delivery.actualTruckCount} trucks)`);
      });
    }

    // Build final prompt
    const promptSections = [
      this.getSystemInstructions(),
      '',
      ...driverInfo,
      ...feedbackSection,
      ...deliveriesSection,
      '',
      'Analyze and return ONLY valid JSON:',
      '{',
      '  "overall": "Brief performance summary",',
      '  "strengths": "Key strengths and improvement areas",',
      '  "recommendations": "Specific actionable recommendations",',
      '  "risk": "Risk assessment and concerns"',
      '}'
    ];

    return promptSections.join('\n');
  }

  /**
   * Calculate driver experience based on creation date.
   * This helper function remains unchanged.
   */
  calculateExperience(createdAt) {
    if (!createdAt) return 'Unknown';
    
    const created = new Date(createdAt);
    const now = new Date();
    const diffTime = Math.abs(now - created);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 30) {
      return `${diffDays} days`;
    } else if (diffDays < 365) {
      const months = Math.floor(diffDays / 30);
      return `${months} month${months > 1 ? 's' : ''}`;
    } else {
      const years = Math.floor(diffDays / 365);
      const remainingMonths = Math.floor((diffDays % 365) / 30);
      let experience = `${years} year${years > 1 ? 's' : ''}`;
      if (remainingMonths > 0) {
        experience += `, ${remainingMonths} month${remainingMonths > 1 ? 's' : ''}`;
      }
      return experience;
    }
  }

  /**
   * Test the AI service connection by sending a simple prompt.
   */
  async testConnection() {
    return super.testConnection('Driver AI Service');
  }
}

module.exports = new AIService();
